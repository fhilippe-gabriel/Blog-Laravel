version: '3.7'
services:
  mailhog:
    image: 'mailhog/mailhog:latest'
    networks:
      - net
    ports:
      - '5098:8025'
  minio:
    image: 'minio/minio'
    hostname: minio
    environment:
      MINIO_ACCESS_KEY: '${MINIO_ACCESS_KEY?Variable MINIO_ACCESS_KEY not set}'
      MINIO_SECRET_KEY: '${MINIO_SECRET_KEY?Variable MINIO_SECRET_KEY not set}'
    volumes:
      - minio-data:/data
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      labels:
        traefik.enable: 'true'
        traefik.docker.network: traefik-public
        traefik.constraint-label: traefik-public
        traefik.http.routers.sissgo-dev-minio-http.rule: 'Host(`minio.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}`)'
        traefik.http.routers.sissgo-dev-minio-http.entrypoints: http
        traefik.http.routers.sissgo-dev-minio-http.middlewares: https-redirect
        traefik.http.routers.sissgo-dev-minio-https.rule: 'Host(`minio.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}`)'
        traefik.http.routers.sissgo-dev-minio-https.entrypoints: https
        traefik.http.routers.sissgo-dev-minio-https.tls: 'true'
        traefik.http.routers.sissgo-dev-minio-https.tls.certresolver: le
        traefik.http.services.sissgo-dev-minio.loadbalancer.server.port: '9000'
    networks:
      - net
      - traefik-public
  db:
    image: 'postgres:13-alpine'
    environment:
      POSTGRES_USER: '${POSTGRES_USER?Variable POSTGRES_USER not set}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD?Variable POSTGRES_PASSWORD not set}'
    ports:
      - '${POSTGRES_PORT?Variable POSTGRES_PORT not set}:5432'
    networks:
      - net
  front:
    image: '$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA'
    build:
      context: ./../frontend
    command: >-
      bash -c "cd /app && npm config set scripts-prepend-node-path auto && yarn install && yarn build && yarn start:dev"
    environment:
      VIRTUAL_HOST: https://api.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}
      CLIENT_ID: ${CLIENT_ID?Variable APP_KEY not set}
      CLIENT_SECRET: ${CLIENT_SECRET?Variable APP_KEY not set}
    deploy:
      labels:
        traefik.enable: 'true'
        traefik.docker.network: traefik-public
        traefik.constraint-label: traefik-public
        traefik.http.routers.sissgo-dev-http.rule: 'Host(`${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}`)'
        traefik.http.routers.sissgo-dev-http.entrypoints: http
        traefik.http.routers.sissgo-dev-http.middlewares: https-redirect
        traefik.http.routers.sissgo-dev-https.rule: 'Host(`${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}`)'
        traefik.http.routers.sissgo-dev-https.entrypoints: https
        traefik.http.routers.sissgo-dev-https.tls: 'true'
        traefik.http.routers.sissgo-dev-https.tls.certresolver: le
        traefik.http.services.sissgo-dev.loadbalancer.server.port: '3000'
    networks:
      - net
      - traefik-public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 20s
      retries: 10
    depends_on:
      - backend
  backend:
    image: '$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA'
    build:
      context: ./../backend
    command: >-
      bash -c "cd /var/www && composer install && cp .env.example .env && php artisan config:cache && php artisan migrate:fresh && php artisan migrate && php artisan db:seed && chown -hR $user:www-data /var/www && chmod -R 775 /var/www/ && php artisan storage:link && php artisan passport:key && php artisan l5-swagger:generate && apachectl -D FOREGROUND"
    environment:
      APP_NAME: SisSGO
      APP_KEY: ${APP_KEY?Variable APP_KEY not set}
      APP_ENV: development
      APP_DEBUG: 'true'
      CACHE_DRIVER: 'file'
      SESSION_DRIVER: 'file'
      APP_URL: 'https://api.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}'
      L5_SWAGGER_CONST_HOST: 'https://api.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}'
      ENABLE_HTTPS: 'true'
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: '${POSTGRES_USER?Variable POSTGRES_USER not set}'
      DB_USERNAME: '${POSTGRES_USER?Variable POSTGRES_USER not set}'
      DB_PASSWORD: '${POSTGRES_PASSWORD?Variable POSTGRES_PASSWORD not set}'
      MINIO_ENDPOINT: 'http://minio.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}'
      MINIO_KEY: '${MINIO_ACCESS_KEY?Variable MINIO_ACCESS_KEY not set}'
      MINIO_SECRET: '${MINIO_SECRET_KEY?Variable MINIO_SECRET_KEY not set}'
      MINIO_BUCKET: 'sissgo'
    deploy:
      labels:
        traefik.enable: 'true'
        traefik.docker.network: traefik-public
        traefik.constraint-label: traefik-public
        traefik.http.routers.sissgo-dev-api-http.rule: 'Host(`api.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}`)'
        traefik.http.routers.sissgo-dev-api-http.entrypoints: http
        traefik.http.routers.sissgo-dev-api-http.middlewares: https-redirect
        traefik.http.routers.sissgo-dev-api-https.rule: 'Host(`api.${VIRTUAL_HOST?Variable VIRTUAL_HOST not set}`)'
        traefik.http.routers.sissgo-dev-api-https.entrypoints: https
        traefik.http.routers.sissgo-dev-api-https.tls: 'true'
        traefik.http.routers.sissgo-dev-api-https.tls.certresolver: le
        traefik.http.services.sissgo-dev-api.loadbalancer.server.port: '80'
    networks:
      - net
      - traefik-public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/v1"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - db
networks:
  net:
    driver: overlay
    attachable: true
  traefik-public:
    external: true
volumes:
  minio-data: {}
  # db_data: {}
  # storage: {}
